class Solution {
private:
    void buildMatrixMap(vector<vector<int>>& mat, unordered_map<int, unordered_map<int, int>>& matrixMap)
    {
        int m = mat.size();
        int n = mat[0].size();
        for(int i=0; i<m; ++i)
        {
            for(int j=0; j<n; ++j)
            {
                if (mat[i][j])
                {
                    matrixMap[i][j] = mat[i][j];
                }
            }
        }
    }
public:
    vector<vector<int>> multiply(vector<vector<int>>& mat1, vector<vector<int>>& mat2) {
        unordered_map<int, unordered_map<int, int>> matrixMap1;
        unordered_map<int, unordered_map<int, int>> matrixMap2;
        int m = mat1.size();
        int n = mat2[0].size();
        vector<vector<int>> result(m, vector<int>(n, 0));
        buildMatrixMap(mat1, matrixMap1);
        buildMatrixMap(mat2, matrixMap2);
        for(auto& row: matrixMap1)
        {
            for(auto& col: row.second)
            {
                auto iter1 = matrixMap2.find(col.first);
                if (iter1 != matrixMap2.end())
                {
                    for (auto& col2: iter1->second)
                    {
                        result[row.first][col2.first] += (col.second * col2.second); 
                    }
                }
            }
        }        
        return result;
    }
};
