class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        vector<int> dp(n, 1);
        vector<int> prefix(n, -1);
        int index = -1, max = -1;
        for (int i=0; i<n; ++i)
        {
            for(int j=i-1; j>=0; --j)
            {
                if ((nums[i]%nums[j]==0) && (dp[i]<dp[j]+1))
                {
                    dp[i] = dp[j]+1;
                    prefix[i] = j;
                }
            }
            if (dp[i]>max)
            {
                max = dp[i];
                index = i;
            }
        }
        vector<int> result;
        while (index != -1)
        {
            result.push_back(nums[index]);
            index = prefix[index];
        }
        return result;
    }
};
