class Solution {  
public:
   
    int knightDialer(int n) {
        vector<long> prev(10, 1);
        vector<long> curr(10, 0);
        vector<vector<int>> moves = {
            {4, 6}, {6, 8}, {7, 9}, {4, 8}, {0, 3, 9}, {}, {0, 1, 7}, {2, 6}, {1, 3}, {2, 4}
        };
        int mod = 1000000007;
        for (int i=2; i<=n; ++i)
        {
            for (int j=0; j<10; ++j)
            { 
                auto mod_sum = [&](int s, int k) { return (s+prev[k])%mod;};
                curr[j] = accumulate(begin(moves[j]), end(moves[j]), 0, mod_sum);
            }
            swap(prev, curr);
        }
        long result = accumulate(prev.begin(), prev.end(), 0, [&](int s, int k) { return (s+k)%mod;});
        return result;
    }
};
