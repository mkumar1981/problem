class Solution {
private:
    struct EdgeWeight
    {
        int v1;
        int v2;
        int cost;
        EdgeWeight(int v_1, int v_2, int c):v1(v_1), v2(v_2), cost(c)
        {}
    };
    
    struct cmp
    {
        bool operator()(EdgeWeight& w1, EdgeWeight& w2)
        {
            return w1.cost<w2.cost;
        }
    };
    class UnionFind
    {
    private:
        vector<int> parent;
        vector<int> sizes;
    public:
        UnionFind(int n)
        {
            parent.resize(n+1);
            sizes.resize(n+1);
            for(int i=0; i<=n; ++i)
            {
                parent[i] = i;
                sizes[i] = 1;
            }
        }
        bool isConnected(int x, int y)
        {
            int p1 = find(x);
            int p2 = find(y);
            return (p1==p2);
        }
        int find(int x)
        {
            int p = parent[x];
            if (p==x)
                return p;
            return parent[x] = find(p);
        }
        void Union(int x, int y)
        {
            int p1 = find(x);
            int p2 = find(y);
            if (p1!=p2)
            {
                if (sizes[p1]<sizes[p2])
                {
                    sizes[p2]+=sizes[p1];
                    parent[p1] = p2;
                }
                else
                {
                    parent[p2] = p1;
                    sizes[p1] += sizes[p2];
                }
            }
        }
    };
public:
    int minCostToSupplyWater(int n, vector<int>& wells, vector<vector<int>>& pipes) {
        vector<EdgeWeight> edgeVec;
        for(int i=0; i<wells.size(); ++i)
        {
            edgeVec.emplace_back(0, i+1, wells[i]);
        }
        for(int i=0; i<pipes.size(); ++i)
        {
            edgeVec.emplace_back(pipes[i][0], pipes[i][1], pipes[i][2]);
        }
        sort(edgeVec.begin(), edgeVec.end(), cmp());
        UnionFind uf(n);
        int minCost = 0;
        for(int i=0; i<edgeVec.size(); ++i)
        {
            auto edge = edgeVec[i];
            if (!uf.isConnected(edge.v1, edge.v2))
            {
                uf.Union(edge.v1, edge.v2);
                minCost += edge.cost;
            }
        }
        return minCost;
    }
};
