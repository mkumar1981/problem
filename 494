class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int target) {
        int sum = 0, zerocount = 0;
        for (auto num: nums)
        {
            sum += num;
            if (num==0)
                ++zerocount;
        }
        int total = (target+sum);
        if (total&0x1 || total<0)
            return 0;
        total >>=1;
        int n = nums.size();
        vector<vector<int>> dp(n+1, vector<int>(total+1, 0));
        for (int i=0; i<=n; ++i)
            dp[i][0] = 1;
        for (int i=1; i<=n; ++i)
        {
            for(int j=1; j<=total; ++j)
            {
                if (nums[i-1]<=j && nums[i-1])
                    dp[i][j] = dp[i-1][j] + dp[i-1][j-nums[i-1]];
                else
                    dp[i][j] = dp[i-1][j];
            }
        }
        return pow(2, zerocount) * dp[n][total];
    }
};
