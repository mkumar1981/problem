class Solution {
private:
    int maxTwoNoOverlap(vector<int>& nums, int L, int M, int n)
    {
        vector<int> left(n+1, 0);
        vector<int> right(n+1, 0);
        int l = 0, r = 0;
        for(int i=0, j = n-1; i<n; ++i, --j)
        {
            l += nums[i];
            r += nums[j];
            left[i+1] = max(left[i], l);
            right[j] = max(right[j+1], r);
            if (i+1>=L)
                l -= nums[i-L+1];
            if (n-j>=M)
                r -= nums[j+M-1];
        }
        int res = 0;
        for(int i=0; i<n; ++i)
            res = max(res, left[i]+right[i]);
        return res;
    }
public:
    int maxSumTwoNoOverlap(vector<int>& nums, int firstLen, int secondLen) {
        int n = nums.size();
        return max(maxTwoNoOverlap(nums, firstLen, secondLen, n), 
                      maxTwoNoOverlap(nums, secondLen, firstLen, n));
    }
};
