class Solution {
private:
    int countPair(vector<int>& nums, int guess)
    {
        int windowStart = 0, count = 0;
        for(int windowEnd=1; windowEnd<nums.size(); ++windowEnd)
        {
            int diff = nums[windowEnd]-nums[windowStart];
            while (diff>guess && windowStart<windowEnd)
            {
                diff = nums[windowEnd]-nums[++windowStart];
            }
            count += (windowEnd-windowStart);
        }
        return count;
    }
public:
    int smallestDistancePair(vector<int>& nums, int k) {
        int min = numeric_limits<int>::max();
        int max = numeric_limits<int>::min();
        sort(nums.begin(), nums.end());
        for(auto num: nums)
        {
            min = std::min(min, num);
            max = std::max(max, num);
        }
        int diff = max-min;
        int l = 0, r = diff;
        while (l<=r)
        {
            int mid = l+(r-l)/2;
            int cnt = countPair(nums, mid);
            if (cnt>=k)
                r = mid-1;
            else
                l = mid+1;
        }
        return l;
    }
};
