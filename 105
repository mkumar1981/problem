class Solution {
private:
    unordered_map<int, int> inorderMap;
    void buildInorderMap(vector<int>& inorder)
    {
        for(int i=0; i<inorder.size(); ++i)
        {
            inorderMap[inorder[i]] = i;
        }
    }
    
    TreeNode* constructTree(vector<int>& preorder, vector<int>& inorder,
                             int istart, int iend, int& pstart)
    {
        if (istart>iend)
            return nullptr;
        int num = preorder[pstart++];
        int index = inorderMap[num];
        TreeNode* root = new TreeNode(num);
        root->left = constructTree(preorder, inorder, istart, index-1, pstart);
        root->right = constructTree(preorder, inorder, index+1, iend, pstart);
        return root;
    }
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        buildInorderMap(inorder);
        int preorderIndex = 0;
        return constructTree(preorder, inorder, 0, inorder.size()-1, preorderIndex);
    }
};
