class Solution {
private:
    unordered_map<int, bool> memo;
    bool wordBreak(string& s, int pos, unordered_set<string>& dict)
    {
        if (pos == s.length())
            return true;
        else if (memo.count(pos))
            return memo[pos];
        for(int i=pos; i<s.length(); ++i)
        {
            string temp = s.substr(pos, i-pos+1);
            if (dict.count(temp) && wordBreak(s, i+1, dict))
            {
                memo[pos] = true;
                break;
            }
        }
        return memo[pos];
    }
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        unordered_set<string> dict;
        for(auto& word: wordDict)
            dict.insert(word);
        return wordBreak(s, 0, dict);
    }
};
