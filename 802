class Solution {
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        int n = graph.size();
        vector<int> outdegree(n, 0);
        unordered_map<int, vector<int>> graphMap;
        for(int i=0; i<n; ++i)
        {
            int size = graph[i].size();
            outdegree[i] += size;
            for(int j=0; j<size; ++j)
            {
                graphMap[graph[i][j]].push_back(i);
            }
        }
        queue<int> q;
        for(int i=0; i<n; ++i)
        {
            if (outdegree[i] == 0)
                q.push(i);
        }
        set<int> ans;
        while (!q.empty())
        {
            int u = q.front();
            ans.insert(u);
            q.pop();
            for(auto& node: graphMap[u])
            {
                if (--outdegree[node] == 0)
                    q.push(node);
            }
        }
        vector<int> result;
        for(auto iter: ans)
            result.push_back(iter);
        //sort(ans.begin(), ans.end());
        return result;
    }
};
