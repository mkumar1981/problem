class Solution {
private:
    bool isNeighbor(string& s1, string& s2)
    {
        if (s1.length() != s2.length())
            return false;
        int diff = 0;
        for(int i=0; i<s1.length(); ++i)
        {
            if (s1[i]!=s2[i])
                ++diff;
            if (diff>1) return false;
        }
        return true;
    }
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        int n = wordList.size();
        unordered_map<int, vector<int>> graphMap;
        for(int i=0; i<n; ++i)
        {
            for(int j=i+1; j<n; ++j)
            {
                if (isNeighbor(wordList[i], wordList[j]))
                {
                    graphMap[i].push_back(j);
                    graphMap[j].push_back(i);
                }
            }
        }
        int endWordIndex = -1;
        for (int i=0; i<n; ++i)
        {
            if (isNeighbor(beginWord, wordList[i]))
            {
                graphMap[-1].push_back(i);
            }
            if (wordList[i] == endWord)
                endWordIndex=i;
        }
        if (endWordIndex==-1)
            return 0;
        queue<int> q;
        q.push(-1);
        int len = 0;
        unordered_set<int> seen;
        seen.insert(-1);
        while (!q.empty())
        {
            ++len;
            int size = q.size();
            for(int i=0; i<size; ++i)
            {
                int index = q.front();
                q.pop();
                if (index==endWordIndex)
                    return len;
                for (auto neigh: graphMap[index])
                {
                    if (seen.count(neigh)==0)
                    {
                        seen.insert(neigh);
                        q.push(neigh);
                    }
                }
            }
        }
        return 0;
    }
};
