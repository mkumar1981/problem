class Solution {
public:
    /*
     * T[i][k][0] = max(T[i-1][k][0], T[i-1][k][1]+prices[i]);
     * T[i][k][1] = max(T[i-1][k][1], T[i-1][k-1][0]-prices[i]);
     * T[i][2][0] = max(T[i-1][2][0], T[i-1][2][1]+prices[i]);
     * T[i][2][1] = max(T[i-1][2][1], T[i-1][1][0]-prices[i]);
     * T[i][1][0] = max(T[i-1][1][0], T[i-1][1][1]+prices[i]);
     * T[i][1][1] = max(T[i-1][1][1], T[i-1][0][0]-prices[i])
     */
    int maxProfit(vector<int>& prices) {
        int Ti_20 = 0;
        int Ti_21 = numeric_limits<int>::min();
        int Ti_10 = 0;
        int Ti_11 = numeric_limits<int>::min();
        
        for (auto price: prices)
        {
            Ti_21 = max(Ti_21, Ti_10-price);
            Ti_20 = max(Ti_20, Ti_21+price);
            Ti_11 = max(Ti_11, -price);
            Ti_10 = max(Ti_10, Ti_11+price);
        }
        return Ti_20;
    }
};
