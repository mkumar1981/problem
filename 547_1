class Solution {
private:
    class UnionFind
    {
    private:
        vector<int> parent;
        vector<int> size;
        int groups;
    public:
        UnionFind(int n)
        {
            parent.resize(n);
            size.resize(n);
            groups = n;
            for(int i=0; i<n; ++i)
            {
                parent[i] = i;
                size[i] = 1;
            }
        }
        int find(int x)
        {
            if (parent[x] == x)
                return x;
            return parent[x] = find(parent[x]);
        }
        void Union(int x, int y)
        {
            int px = find(x);
            int py = find(y);
            if (px!=py)
            {
                if (size[px]<size[py])
                {
                    size[py] += size[px];
                    parent[px] = py;
                }
                else
                {
                    size[px] += size[py];
                    parent[py] = px;
                }
                --groups;
            }
        }
        int getProvincesCount()
        {
            return groups;
        }
    };
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();
        UnionFind uf(n);
        for(int i=0; i<n; ++i)
        {
            for(int j=0; j<n; ++j)
            {
                if (isConnected[i][j])
                {
                    uf.Union(i, j);
                }
            }
        }
        return uf.getProvincesCount();
    }
};
